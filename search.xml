<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue-music-pc项目</title>
      <link href="/2021/092950482.html"/>
      <url>/2021/092950482.html</url>
      
        <content type="html"><![CDATA[<h1 id="vue-music-pc-项目"><a href="#vue-music-pc-项目" class="headerlink" title="vue-music-pc 项目"></a>vue-music-pc 项目</h1><ul><li>这个项目是我自己动手做的第一个项目，完全靠自己做的，所以 css 写的不好，有一些逻辑写的也不是很好，后来再慢慢去优化吧，项目还没有上线。但是我的代码都放到了 GitHub 和 gitee 上了，一些东西还是有帮助的。</li><li>这里是 GitHub 的地址 <a href="https://github.com/wuyang147258/vue-music-pc">vue 网易云(github)</a> 这个是 gitee 的地址 <a href="https://gitee.com/ycwuyang/vue-music-pc">vue 网易云(gitee)</a> 这个是我用的后台接口 <a href="https://binaryify.github.io/NeteaseCloudMusicApi/#/">网易云后台接口</a></li><li>技术栈：vue+vuex+element-ui</li></ul><h2 id="开发前的准备："><a href="#开发前的准备：" class="headerlink" title="开发前的准备："></a>开发前的准备：</h2><ul><li>在我们进行痛快淋漓的写业务逻辑之前必然是需要配置一些插件依赖什么的。这里我 ui 框架是用的 element-ui 这个是开源的框架，功能还是比较齐全的。在 vue-cli 的使用方法我已经给大家找好了。<a href="https://blog.csdn.net/u013350495/article/details/103533320?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163288625116780264060046%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=163288625116780264060046&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-103533320.first_rank_v2_pc_rank_v29&amp;utm_term=vue-ui%E6%8C%89%E9%9C%80%E5%AF%BC%E5%85%A5element-ui&amp;spm=1018.2226.3001.4187">按需导入 element-ui</a> 还有的就是 axios 库，这个比较简单安装一下就可以了。下面最重要的一点也是我踩过的坑，我最想给大家说的。就是在你访问后台接口的时候会出现跨域的问题，大家可能以前也遇到过满难受的。这是我用的解决方案源码：</li></ul><pre class=" language-lang-javascript"><code class="language-lang-javascript">import axios from 'axios'import qs from 'qs'axios.defaults.withCredentials = true // 允许跨域设置，不然可能因为拿不到cookie而报错axios.defaults.baseURL = 'http://localhost:3000/' /*这里的地址就是刚刚启起来的服务器地址  *//*请求拦截*/axios.interceptors.request.use(  config => &#123;    if (config.meth === 'post' && !(config.data instanceof FormData)) &#123;      config.headers = &#123;        'Content-Type': 'application/x-www-form-urlencoded'      &#125;      config.data = qs.stringify(config.data, &#123;        arrayFormat: 'repeat'      &#125;) /*这里是，后端要求传数组的时候做的设置，以前出过错*/    &#125;    return config  &#125;,  error => &#123;    return Promise.reject(error)  &#125;)/* 响应拦截 */axios.interceptors.response.use(  res => &#123;    /*可在这里根据返回的状态码做一些拦截操作*/    return res  &#125;,  err => &#123;    return Promise.resolve(err)  &#125;)export default axios /*记得导出*/</code></pre><p>解决了以上问题之后我们就可以愉快的进行项目开发了！！!</p><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>登录功能的思路很简单。第一先设置一个路由导航，阻止用户不进行登录就进入主页。第二获取后台接口进行登录(我使用了手机验证码登录和密码登录)，成功登录之后需要获取一个登录状态要不然后面的一些功能可能没有办法使用。</p><h2 id="歌曲实现播放"><a href="#歌曲实现播放" class="headerlink" title="歌曲实现播放"></a>歌曲实现播放</h2><p>在 pc 端上面怎么实现歌曲播放呢，我首先想到的是 audio 标签。然后就想要将音乐的 url 放到 audio 的 src 上应该就可以进行播放了。这是我当时写的时候的思路。因为组件的复用，所以我把 audio 放到了主页上，这样不管以后再增加什么歌曲或者歌单将这个歌曲的 id 存入到 vuex 中就可以拿到歌曲的 url，然后通过 ref 就可以设置 audio 的 src 进行歌曲的播放了。组件的复用还可以，省了不少麻烦。</p><h2 id="歌曲详情页面-歌词滚动实现"><a href="#歌曲详情页面-歌词滚动实现" class="headerlink" title="歌曲详情页面(歌词滚动实现)"></a>歌曲详情页面(歌词滚动实现)</h2><p>因为其他的东西不算特别难，业务逻辑基本都是一样的都是获取后台接口的数据然后进行渲染，没有什么稀奇的东西。我感觉这个歌词的滚动还算比较难，因为我在做的时候费了不少力气，也看了不少人的博客。这个解决方案是我看一个教学视频上看到的。<br>思路就是将后台获取到的歌词数据处理成一个时间段一句歌词的格式。然后获取当前歌曲播放的时间让这个时间大于上一句歌词的时间小于下一句歌词的时间，思路就是这样。下面附上歌词处理的代码，后面还要加上 css 的动画滚动。</p><pre class=" language-lang-javascript"><code class="language-lang-javascript">//这里是处理歌词格式和实现歌词滚动的代码//处理歌词方法       formatTimeToSec(value)&#123;                    let arr = value.split(':');                    return (Number(arr[0]*60) +  Number(arr[1])).toFixed(1);            &#125;,   //处理歌词方法   proLyric(lyric)&#123;     //利用正则处理歌词                        // console.log(lyric)                        let re=/\[([^\]]+)\]([^\[]+)/g                        var result=[];                        lyric.replace(re,($0,$1,$2)=>&#123;                            result.push(&#123;"time":this.formatTimeToSec($1),"lyric":$2&#125;)                        &#125;)                        this.songLyric=result   &#125;,   //实现歌词滚动   //实现歌词滚动            listenLyricIndex()&#123;                //清除之前存在的计时器                clearInterval(this.timer)                this.timer=setInterval(()=>&#123;                    for(var i=0;i<this.songLyric.length;i++)&#123;                        if(this.$store.state.currentTime>this.songLyric[this.songLyric.length-1].time)&#123;                            this.lyricIndex=this.songLyric.length-1                            break;                        &#125;                        if(this.$store.state.currentTime>this.songLyric[i].time && this.$store.state.currentTime<this.songLyric[i+1].time)&#123;                            this.lyricIndex=i                        &#125;                    &#125;                &#125;,500)            &#125;,            //关闭定时器            cancelLyriIdex()&#123;                clearInterval(this.timer)            &#125;,</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客小试牛刀</title>
      <link href="/2021/092839553.html"/>
      <url>/2021/092839553.html</url>
      
        <content type="html"><![CDATA[<h1 id="成长"><a href="#成长" class="headerlink" title="成长"></a>成长</h1><h2 id="一个前端小白的成长经历"><a href="#一个前端小白的成长经历" class="headerlink" title="一个前端小白的成长经历"></a>一个前端小白的成长经历</h2><ul><li>见证了自己的成长，真的很幸福。从大一到现在一直一个人在自学，到现在可以做一些<br>有趣的东西，可以做一些好玩的东西感觉真好。虽然自己出了很多 bug，但是基本上也都<br>上网进行了解决，也有看见困难就退缩的时候，比如这个博客一开始我就没有搭建好，<br>然后放弃了搭建。几天后我又重拾进行搭建。现在终于成功了，所以不是办不到，只是<br>看自己想不想干了。</li></ul><h2 id="可爱的小猫"><a href="#可爱的小猫" class="headerlink" title="可爱的小猫"></a>可爱的小猫</h2><p>以后在能养活自己的前提养一只小猫！<br><img src="https://th.bing.com/th/id/R.f18f12a4ba5ae21a01bd8a8ecae7fa42?rik=5S8Pjv29%2fYLEnA&amp;pid=ImgRaw&amp;r=0" alt=""></p><h2 id="vue-网易云"><a href="#vue-网易云" class="headerlink" title="vue 网易云"></a>vue 网易云</h2><p>这是自己做的 pc 端网易云，完全自己做。我样式搞得不是很好，需要重新加工。<br>这是 GitHub 地址 <a href="https://github.com/wuyang147258/vue-music-pc">vue 网易云</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 成长经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/092816107.html"/>
      <url>/2021/092816107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-lang-bash"><code class="language-lang-bash">$ hexo new "My New Post"</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-lang-bash"><code class="language-lang-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-lang-bash"><code class="language-lang-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-lang-bash"><code class="language-lang-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
